{
  "address": "0x02a2788a08fb7f34C379d536fEa25BD252B6eC59",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "approveAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "depositToAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "flashFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "maxFlashAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdrawFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x32dc004519a19b51de02bacaa0df1c243cda39c1a82d15c4ced3b2f1ada68422",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xd16e3870a84ec00afEae75cEF4F8557aED914e69",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1433159",
    "logsBloom": "0x
    "blockHash": "0x9d186bc6841883b3d639b0ff8fe277499c0a9b17a0dd049a3846e19394648133",
    "transactionHash": "0x32dc004519a19b51de02bacaa0df1c243cda39c1a82d15c4ced3b2f1ada68422",
    "logs": [],
    "blockNumber": 23022857,
    "cumulativeGasUsed": "1433159",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0x1ad4a3520af26f40468a205a4fe0ca02e7e28ce688f3de902cb61ee6fbbeae63",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"depositToAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"WETH10 is an Ether ERC20 wrapper. You can `deposit` Ether and obtain Wrapped Ether which can then be operated as an ERC20 token. You can `withdraw` Ether from WETH10, which will burn Wrapped Ether in your wallet. The amount of Wrapped Ether in any wallet is always identical to the balance of Ether deposited minus the Ether withdrawn with that specific wallet.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Sets `value` as allowance of `spender` account over caller account's WETH10 token. Returns boolean value indicating whether operation succeeded. Emits {Approval} event.\"},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets `value` as allowance of `spender` account over caller account's WETH10 token, after which a call is executed on `spender` with the `data` parameter. Returns boolean value indicating whether operation succeeded. Emits {Approval} event. For more information on approveAndCall format, see https://github.com/ethereum/EIPs/issues/677.\"},\"deposit()\":{\"details\":\"`msg.value` of ether sent to contract grants caller account a matching increase in WETH10 token balance. Emits {Transfer} event to reflect WETH10 token mint of `msg.value` from zero address to caller account.\"},\"depositTo(address)\":{\"details\":\"`msg.value` of ether sent to contract grants `to` account a matching increase in WETH10 token balance. Emits {Transfer} event to reflect WETH10 token mint of `msg.value` from zero address to `to` account.\"},\"depositToAndCall(address,bytes)\":{\"details\":\"`msg.value` of ether sent to contract grants `to` account a matching increase in WETH10 token balance, after which a call is executed to an ERC677-compliant contract. Returns boolean value indicating whether operation succeeded. Emits {Transfer} event. Requirements:   - caller account must have at least `value` WETH10 token and transfer to account (`to`) cannot cause overflow. For more information on transferAndCall format, see https://github.com/ethereum/EIPs/issues/677.\"},\"flashFee(address,uint256)\":{\"details\":\"Return the fee (zero) for flash lending an amount of WETH10.\"},\"flashLoan(address,address,uint256,bytes)\":{\"details\":\"Flash lends `value` WETH10 tokens to the receiver address. By the end of the transaction, `value` WETH10 tokens will be burned from the receiver. The flash minted WETH10 is not backed by real Ether, but can be withdrawn as such up to the Ether balance of this contract. Arbitrary data can be passed as a bytes calldata parameter. Emits two {Transfer} events for minting and burning of the flash minted amount.\"},\"maxFlashAmount(address)\":{\"details\":\"Return the amount of WETH10 that can be flash lended.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as allowance of `spender` account over `owner` account's WETH10 token, given `owner` account's signed approval. Emits {Approval} event. Requirements:   - `deadline` must be timestamp in future.   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over EIP712-formatted function arguments.   - the signature must use `owner` account's current nonce (see {nonces}).   - the signer cannot be zero address and must be `owner` account. For more information on signature format, see https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. WETH10 token implementation adapted from https://github.com/albertocuestacanada/ERC20Permit/blob/master/contracts/ERC20Permit.sol.\"},\"totalSupply()\":{\"details\":\"Returns the total supply of WETH10 as the Ether held in this contract.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `value` WETH10 token from caller's account to account (`to`). A transfer to `address(0)` triggers a withdraw of the sent tokens. Returns boolean value indicating whether operation succeeded. Emits {Transfer} event. Requirements:   - caller account must have at least `value` WETH10 token.\"},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves `value` WETH10 token from caller's account to account (`to`), after which a call is executed to an ERC677-compliant contract. Returns boolean value indicating whether operation succeeded. Emits {Transfer} event. Requirements:   - caller account must have at least `value` WETH10 token. For more information on transferAndCall format, see https://github.com/ethereum/EIPs/issues/677.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `value` WETH10 token from account (`from`) to account (`to`) using allowance mechanism. `value` is then deducted from caller account's allowance, unless set to `type(uint256).max`. A transfer to `address(0)` triggers a withdraw of the sent tokens in favor of caller. Returns boolean value indicating whether operation succeeded. Emits {Transfer} and {Approval} events. Requirements: - owner account (`from`) must have at least `value` WETH10 token. - caller account must have at least `value` allowance from account (`from`).\"},\"withdraw(uint256)\":{\"details\":\"Burn `value` WETH10 token from caller account and withdraw matching ether to the same. Emits {Transfer} event to reflect WETH10 token burn of `value` WETH10 token to zero address from caller account.  Requirements:   - caller account must have at least `value` balance of WETH10 token.\"},\"withdrawFrom(address,address,uint256)\":{\"details\":\"Burn `value` WETH10 token from account (`from`) and withdraw matching ether to account (`to`). Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`), unless allowance is set to `type(uint256).max` Emits {Transfer} event to reflect WETH10 token burn of `value` to zero address from account (`from`). Requirements:   - `from` account must have at least `value` balance of WETH10 token.   - `from` account must have approved caller to spend at least `value` of WETH10 token, unless `from` and caller are the same account.\"},\"withdrawTo(address,uint256)\":{\"details\":\"Burn `value` WETH10 token from caller account and withdraw matching ether to account (`to`). Emits {Transfer} event to reflect WETH10 token burn of `value` WETH10 token to zero address from caller account. Requirements:   - caller account must have at least `value` balance of WETH10 token.\"}},\"stateVariables\":{\"allowance\":{\"details\":\"Records number of WETH10 token that account (second) will be allowed to spend on behalf of another account (first) through {transferFrom}.\"},\"balanceOf\":{\"details\":\"Records amount of WETH10 token owned by account.\"},\"flashMinted\":{\"details\":\"Current amount of flash minted WETH.\"},\"nonces\":{\"details\":\"Records current ERC2612 nonce for account. This value must be included whenever signature is generated for {permit}. Every successful call to {permit} increases account's nonce by one. This prevents signature from being used multiple times.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WETH10.sol\":\"WETH10\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"contracts/WETH10.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Copyright (C) 2015, 2016, 2017 Dapphub\\n// Adapted by Ethereum Community 2020\\npragma solidity 0.7.6;\\n\\nimport \\\"./interfaces/IWETH10.sol\\\";\\nimport \\\"./interfaces/IERC3156FlashBorrower.sol\\\";\\n\\ninterface ITransferReceiver {\\n    function onTokenTransfer(address, uint, bytes calldata) external returns (bool);\\n}\\n\\ninterface IApprovalReceiver {\\n    function onTokenApproval(address, uint, bytes calldata) external returns (bool);\\n}\\n\\n\\n/// @dev WETH10 is an Ether ERC20 wrapper. You can `deposit` Ether and obtain Wrapped Ether which can then be operated as an ERC20 token. You can\\n/// `withdraw` Ether from WETH10, which will burn Wrapped Ether in your wallet. The amount of Wrapped Ether in any wallet is always identical to the\\n/// balance of Ether deposited minus the Ether withdrawn with that specific wallet.\\ncontract WETH10 is IWETH10 {\\n\\n    string public constant name = \\\"Wrapped Ether v10\\\";\\n    string public constant symbol = \\\"WETH10\\\";\\n    uint8  public constant decimals = 18;\\n\\n    bytes32 public immutable PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @dev Records amount of WETH10 token owned by account.\\n    mapping (address => uint256) public override balanceOf;\\n\\n    /// @dev Records current ERC2612 nonce for account. This value must be included whenever signature is generated for {permit}.\\n    /// Every successful call to {permit} increases account's nonce by one. This prevents signature from being used multiple times.\\n    mapping (address => uint256) public override nonces;\\n\\n    /// @dev Records number of WETH10 token that account (second) will be allowed to spend on behalf of another account (first) through {transferFrom}.\\n    mapping (address => mapping (address => uint256)) public override allowance;\\n\\n    /// @dev Current amount of flash minted WETH.\\n    uint256 public override flashMinted;\\n\\n    /// @dev Fallback, `msg.value` of ether sent to contract grants caller account a matching increase in WETH10 token balance.\\n    /// Emits {Transfer} event to reflect WETH10 token mint of `msg.value` from zero address to caller account.\\n    receive() external payable {\\n        _mintTo(msg.sender, msg.value);\\n    }\\n\\n    /// @dev Returns the total supply of WETH10 as the Ether held in this contract.\\n    function totalSupply() external view override returns(uint256) {\\n        return address(this).balance + flashMinted;\\n    }\\n\\n    /// @dev `msg.value` of ether sent to contract grants caller account a matching increase in WETH10 token balance.\\n    /// Emits {Transfer} event to reflect WETH10 token mint of `msg.value` from zero address to caller account.\\n    function deposit() external override payable {\\n        _mintTo(msg.sender, msg.value);\\n    }\\n\\n    /// @dev `msg.value` of ether sent to contract grants `to` account a matching increase in WETH10 token balance.\\n    /// Emits {Transfer} event to reflect WETH10 token mint of `msg.value` from zero address to `to` account.\\n    function depositTo(address to) external override payable {\\n        _mintTo(to, msg.value);\\n    }\\n\\n\\n    /// @dev `msg.value` of ether sent to contract grants `to` account a matching increase in WETH10 token balance,\\n    /// after which a call is executed to an ERC677-compliant contract.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Emits {Transfer} event.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` WETH10 token and transfer to account (`to`) cannot cause overflow.\\n    /// For more information on transferAndCall format, see https://github.com/ethereum/EIPs/issues/677.\\n    function depositToAndCall(address to, bytes calldata data) external override payable returns (bool success) {\\n        _mintTo(to, msg.value);\\n        return ITransferReceiver(to).onTokenTransfer(msg.sender, msg.value, data);\\n    }\\n\\n    /// @dev Return the amount of WETH10 that can be flash lended.\\n    function maxFlashAmount(address token) external view override returns (uint256) {\\n        return token == address(this) ? type(uint112).max - address(this).balance - flashMinted : 0; // Can't underflow - L108\\n    }\\n\\n    /// @dev Return the fee (zero) for flash lending an amount of WETH10.\\n    function flashFee(address token, uint256) external view override returns (uint256) {\\n        require(token == address(this), \\\"WETH: flash mint only WETH10\\\");\\n        return 0;\\n    }\\n\\n    /// @dev Flash lends `value` WETH10 tokens to the receiver address.\\n    /// By the end of the transaction, `value` WETH10 tokens will be burned from the receiver.\\n    /// The flash minted WETH10 is not backed by real Ether, but can be withdrawn as such up to the Ether balance of this contract.\\n    /// Arbitrary data can be passed as a bytes calldata parameter.\\n    /// Emits two {Transfer} events for minting and burning of the flash minted amount.\\n    function flashLoan(address receiver, address token, uint256 value, bytes calldata data) external override {\\n        require(token == address(this), \\\"WETH: flash mint only WETH10\\\");\\n        flashMinted += value;\\n        _mintTo(receiver, value);\\n\\n        IERC3156FlashBorrower(receiver).onFlashLoan(msg.sender, address(this), value, 0, data);\\n\\n        _decreaseAllowance(receiver, address(this), value);\\n        _burnFrom(receiver, value);\\n        flashMinted -= value;\\n    }\\n\\n    /// @dev Burn `value` WETH10 token from caller account and withdraw matching ether to the same.\\n    /// Emits {Transfer} event to reflect WETH10 token burn of `value` WETH10 token to zero address from caller account. \\n    /// Requirements:\\n    ///   - caller account must have at least `value` balance of WETH10 token.\\n    function withdraw(uint256 value) external override {\\n        _burnFrom(msg.sender, value);\\n        _transferEther(msg.sender, value);\\n    }\\n\\n    /// @dev Burn `value` WETH10 token from caller account and withdraw matching ether to account (`to`).\\n    /// Emits {Transfer} event to reflect WETH10 token burn of `value` WETH10 token to zero address from caller account.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` balance of WETH10 token.\\n    function withdrawTo(address payable to, uint256 value) external override {\\n        _burnFrom(msg.sender, value);\\n        _transferEther(to, value);\\n    }\\n\\n    /// @dev Burn `value` WETH10 token from account (`from`) and withdraw matching ether to account (`to`).\\n    /// Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`),\\n    /// unless allowance is set to `type(uint256).max`\\n    /// Emits {Transfer} event to reflect WETH10 token burn of `value` to zero address from account (`from`).\\n    /// Requirements:\\n    ///   - `from` account must have at least `value` balance of WETH10 token.\\n    ///   - `from` account must have approved caller to spend at least `value` of WETH10 token, unless `from` and caller are the same account.\\n    function withdrawFrom(address from, address payable to, uint256 value) external override {\\n        if (from != msg.sender) _decreaseAllowance(from, msg.sender, value);\\n        _burnFrom(from, value);\\n        _transferEther(to, value);\\n    }\\n\\n    /// @dev Sets `value` as allowance of `spender` account over caller account's WETH10 token.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Emits {Approval} event.\\n    function approve(address spender, uint256 value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /// @dev Sets `value` as allowance of `spender` account over caller account's WETH10 token,\\n    /// after which a call is executed on `spender` with the `data` parameter.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Emits {Approval} event.\\n    /// For more information on approveAndCall format, see https://github.com/ethereum/EIPs/issues/677.\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return IApprovalReceiver(spender).onTokenApproval(msg.sender, value, data);\\n    }\\n\\n    /// @dev Sets `value` as allowance of `spender` account over `owner` account's WETH10 token, given `owner` account's signed approval.\\n    /// Emits {Approval} event.\\n    /// Requirements:\\n    ///   - `deadline` must be timestamp in future.\\n    ///   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over EIP712-formatted function arguments.\\n    ///   - the signature must use `owner` account's current nonce (see {nonces}).\\n    ///   - the signer cannot be zero address and must be `owner` account.\\n    /// For more information on signature format, see https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\\n    /// WETH10 token implementation adapted from https://github.com/albertocuestacanada/ERC20Permit/blob/master/contracts/ERC20Permit.sol.\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external override {\\n        require(block.timestamp <= deadline, \\\"WETH: Expired permit\\\");\\n\\n        uint256 chainId;\\n        assembly {chainId := chainid()}\\n        bytes32 DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)));\\n\\n        bytes32 hashStruct = keccak256(\\n            abi.encode(\\n                PERMIT_TYPEHASH,\\n                owner,\\n                spender,\\n                value,\\n                nonces[owner]++,\\n                deadline));\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                hashStruct));\\n\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0) && signer == owner, \\\"WETH: invalid permit\\\");\\n        _approve(owner, spender, value);\\n    }\\n\\n    /// @dev Moves `value` WETH10 token from caller's account to account (`to`).\\n    /// A transfer to `address(0)` triggers a withdraw of the sent tokens.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Emits {Transfer} event.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` WETH10 token.\\n    function transfer(address to, uint256 value) external override returns (bool) {\\n        return _transferFrom(msg.sender, to, value);\\n    }\\n\\n    /// @dev Moves `value` WETH10 token from account (`from`) to account (`to`) using allowance mechanism.\\n    /// `value` is then deducted from caller account's allowance, unless set to `type(uint256).max`.\\n    /// A transfer to `address(0)` triggers a withdraw of the sent tokens in favor of caller.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    ///\\n    /// Emits {Transfer} and {Approval} events.\\n    /// Requirements:\\n    /// - owner account (`from`) must have at least `value` WETH10 token.\\n    /// - caller account must have at least `value` allowance from account (`from`).\\n    function transferFrom(address from, address to, uint256 value) external override returns (bool) {\\n        if (from != msg.sender) _decreaseAllowance(from, msg.sender, value);\\n        return _transferFrom(from, to, value);\\n    }\\n\\n    /// @dev Moves `value` WETH10 token from caller's account to account (`to`), after which a call is executed to an ERC677-compliant contract.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Emits {Transfer} event.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` WETH10 token.\\n    /// For more information on transferAndCall format, see https://github.com/ethereum/EIPs/issues/677.\\n    function transferAndCall(address to, uint value, bytes calldata data) external override returns (bool) {\\n        _transferFrom(msg.sender, to, value);\\n        return ITransferReceiver(to).onTokenTransfer(msg.sender, value, data);\\n    }\\n\\n    /// @dev Sets `value` as allowance of `spender` account over `owner` account's WETH10 token.\\n    /// Emits {Approval} event.\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /// @dev Decreases the allowance of `spender` account over `owner` account's by `value` WETH10 token.\\n    /// If the allowance of `spender` account over `owner` account's is type(uin112).max WETH10 token this function does nothing.\\n    /// Emits {Approval} event.\\n    /// Requirements:\\n    /// - allowance of `spender` account over `owner must be at least `value` WETH10 token.\\n    function _decreaseAllowance(address owner, address spender, uint256 value) internal {\\n        uint256 allowed = allowance[owner][spender];\\n        if (allowed != type(uint256).max) {\\n            require(allowed >= value, \\\"WETH: request exceeds allowance\\\");\\n            _approve(owner, spender, allowed - value);\\n        }\\n    }\\n\\n    /// @dev Moves `value` WETH10 token from account (`from`) to account (`to`) using allowance mechanism.\\n    /// `value` is then deducted from caller account's allowance, unless set to `type(uint256).max`.\\n    /// A transfer to `address(0)` triggers a withdraw of the sent tokens in favor of caller.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    ///\\n    /// Emits {Transfer} and {Approval} events.\\n    /// Requirements:\\n    /// - owner account (`from`) must have at least `value` WETH10 token.\\n    /// - caller account must have at least `value` allowance from account (`from`).\\n    function _transferFrom(address from, address to, uint256 value) internal returns (bool) {\\n        if(to != address(0)) { // Transfer\\n            uint256 balance = balanceOf[from];\\n            require(balance >= value, \\\"WETH: transfer amount exceeds balance\\\");\\n\\n            balanceOf[from] = balance - value;\\n            balanceOf[to] += value;\\n            emit Transfer(from, to, value);\\n        } else { // Withdraw\\n            _burnFrom(from, value);\\n            _transferEther(payable(to), value);\\n        }\\n        \\n        return true;\\n    }\\n\\n    /// @dev Transfers `value` Ether to account (`to`).\\n    function _transferEther(address payable to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        require(success, \\\"WETH: Ether transfer failed\\\");\\n    }\\n\\n    /// @dev Creates `value` WETH10 token on account (`to`).\\n    /// Requirements:\\n    /// - The resulting WETH10 supply must remain below type(uint112).max.\\n    ///\\n    /// Emits {Transfer} event.\\n    function _mintTo(address to, uint256 value) internal {\\n        require(address(this).balance + flashMinted <= type(uint112).max, \\\"WETH: supply limit exceeded\\\");\\n        balanceOf[to] += value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /// @dev Destroys `value` WETH10 token from account (`from`) using allowance mechanism.\\n    /// `value` is then deducted from caller account's allowance, unless set to `type(uint256).max`.\\n    ///\\n    /// Emits {Transfer} and {Approval} events.\\n    /// Requirements:\\n    /// - owner account (`from`) must have at least `value` WETH10 token.\\n    /// - caller account must have at least `value` allowance from account (`from`).\\n    function _burnFrom(address from, uint256 value) internal {\\n        uint256 balance = balanceOf[from];\\n        require(balance >= value, \\\"WETH: burn amount exceeds balance\\\");\\n        balanceOf[from] = balance - value;\\n        emit Transfer(from, address(0), value);\\n    }\\n}\\n\\n\",\"keccak256\":\"0xb2440cff02ce3b39b750b4adacf3cbc82c6b6badec2df24e058f573e8f5ea7be\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5981d95c7e44d9c7deeb43eba225e8ab581a4242ad3d719d534302b9e6d740e4\",\"license\":\"MIT\"},\"contracts/interfaces/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\npragma solidity ^0.7.6;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc15b486e08e39f616a8f5284394d9353fc43f84340bbadd3c8967312fe5e9212\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\n\\ninterface IERC3156FlashBorrower {\\n    function onFlashLoan(address user, address token, uint256 value, uint256 fee, bytes calldata) external;\\n}\",\"keccak256\":\"0xb3ef72371bb024fd121479335ea35c62e34ffee78c8032cd6e0050fb24ef6052\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\ninterface IERC3156FlashLender {\\n    function flashLoan(address receiver, address token, uint256 value, bytes calldata) external;\\n    function flashFee(address token, uint256 value) external view returns (uint256);\\n    function maxFlashAmount(address token) external view returns (uint256);\\n}\",\"keccak256\":\"0xad1e0289e41be319afd8ccb4bf1e8efc17665b5f069f9f0da8d1ecfa66cca636\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWETH10.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Copyright (C) 2015, 2016, 2017 Dapphub\\n// Adapted by Ethereum Community 2020\\npragma solidity 0.7.6;\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC2612.sol\\\";\\nimport \\\"./IERC3156FlashLender.sol\\\";\\n\\n\\n/// @dev WETH10 is an Ether ERC20 wrapper. You can `deposit` Ether and obtain Wrapped Ether which can then be operated as an ERC20 token. You can\\n/// `withdraw` Ether from WETH10, which will burn Wrapped Ether in your wallet. The amount of Wrapped Ether in any wallet is always identical to the\\n/// balance of Ether deposited minus the Ether withdrawn with that specific wallet.\\ninterface IWETH10 is IERC20, IERC2612, IERC3156FlashLender {\\n\\n    /// @dev Returns current amount of flash minted WETH10 token.\\n    function flashMinted() external view returns(uint256);\\n\\n    /// @dev `msg.value` of ether sent to contract grants caller account a matching increase in WETH10 token balance.\\n    /// Emits {Transfer} event to reflect WETH10 token mint of `msg.value` from zero address to caller account.\\n    function deposit() external payable;\\n\\n    /// @dev `msg.value` of ether sent to contract grants `to` account a matching increase in WETH10 token balance.\\n    /// Emits {Transfer} event to reflect WETH10 token mint of `msg.value` from zero address to `to` account.\\n    function depositTo(address to) external payable;\\n\\n    /// @dev Burn `value` WETH10 token from caller account and withdraw matching ether to the same.\\n    /// Emits {Transfer} event to reflect WETH10 token burn of `value` WETH10 token to zero address from caller account. \\n    /// Requirements:\\n    ///   - caller account must have at least `value` balance of WETH10 token.\\n    function withdraw(uint256 value) external;\\n\\n    /// @dev Burn `value` WETH10 token from caller account and withdraw matching ether to account (`to`).\\n    /// Emits {Transfer} event to reflect WETH10 token burn of `value` WETH10 token to zero address from caller account.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` balance of WETH10 token.\\n    function withdrawTo(address payable to, uint256 value) external;\\n\\n    /// @dev Burn `value` WETH10 token from account (`from`) and withdraw matching ether to account (`to`).\\n    /// Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`),\\n    /// unless allowance is set to `type(uint256).max`\\n    /// Emits {Transfer} event to reflect WETH10 token burn of `value` to zero address from account (`from`).\\n    /// Requirements:\\n    ///   - `from` account must have at least `value` balance of WETH10 token.\\n    ///   - `from` account must have approved caller to spend at least `value` of WETH10 token, unless `from` and caller are the same account.\\n    function withdrawFrom(address from, address payable to, uint256 value) external;\\n\\n    /// @dev `msg.value` of ether sent to contract grants `to` account a matching increase in WETH10 token balance,\\n    /// after which a call is executed to an ERC677-compliant contract.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Emits {Transfer} event.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` WETH10 token and transfer to account (`to`) cannot cause overflow.\\n    /// For more information on transferAndCall format, see https://github.com/ethereum/EIPs/issues/677.\\n    function depositToAndCall(address to, bytes calldata data) external payable returns (bool);\\n\\n    /// @dev Sets `value` as allowance of `spender` account over caller account's WETH10 token,\\n    /// after which a call is executed on `spender` with the `data` parameter.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Emits {Approval} event.\\n    /// For more information on approveAndCall format, see https://github.com/ethereum/EIPs/issues/677.\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /// @dev Moves `value` WETH10 token from caller's account to account (`to`), after which a call is executed to an ERC677-compliant contract.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Emits {Transfer} event.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` WETH10 token.\\n    /// For more information on transferAndCall format, see https://github.com/ethereum/EIPs/issues/677.\\n    function transferAndCall(address to, uint value, bytes calldata data) external returns (bool);\\n}\\n\\n\",\"keccak256\":\"0x768d2ba2dbcde9b7bb121699fd33ed5a63c73c6aa5c09cb4a503a4c282c63074\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960805234801561003457600080fd5b5060805161190161005460003980610ac5528061117a52506119016000f3fe60806040526004361061018f5760003560e01c806370a08231116100d6578063b760faf91161007f578063d505accf11610059578063d505accf146107e0578063d9d98ce41461084b578063dd62ed3e14610891576101a0565b8063b760faf914610706578063cae9ca5114610739578063d0e30db0146107d8576101a0565b80639555a942116100b05780639555a9421461065b57806395d89b41146106ab578063a9059cbb146106c0576101a0565b806370a08231146105c65780637ecebe00146106065780638b28d32f14610646576101a0565b80632e1a7d4d116101385780634000aea0116101125780634000aea0146103f05780635cffe9de1461048f5780635ddb7d7e14610539576101a0565b80632e1a7d4d1461038657806330adf81f146103b0578063313ce567146103c5576101a0565b806318160ddd1161016957806318160ddd146102db578063205c2878146102f057806323b872dd14610336576101a0565b806306fdde03146101a5578063095ea7b31461022f5780630ba9c65514610289576101a0565b366101a05761019e33346108d9565b005b600080fd5b3480156101b157600080fd5b506101ba6109be565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f45781810151838201526020016101dc565b50505050905090810190601f1680156102215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023b57600080fd5b506102756004803603604081101561025257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356109f7565b604080519115158252519081900360200190f35b34801561029557600080fd5b506102c9600480360360208110156102ac57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a0d565b60408051918252519081900360200190f35b3480156102e757600080fd5b506102c9610a4f565b3480156102fc57600080fd5b5061019e6004803603604081101561031357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a57565b34801561034257600080fd5b506102756004803603606081101561035957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610a6f565b34801561039257600080fd5b5061019e600480360360208110156103a957600080fd5b5035610aac565b3480156103bc57600080fd5b506102c9610ac3565b3480156103d157600080fd5b506103da610ae7565b6040805160ff9092168252519081900360200190f35b3480156103fc57600080fd5b506102756004803603606081101561041357600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561045057600080fd5b82018360208201111561046257600080fd5b8035906020019184600183028401116401000000008311171561048457600080fd5b509092509050610aec565b34801561049b57600080fd5b5061019e600480360360808110156104b257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013590911691604082013591908101906080810160608201356401000000008111156104fa57600080fd5b82018360208201111561050c57600080fd5b8035906020019184600183028401116401000000008311171561052e57600080fd5b509092509050610bd4565b6102756004803603604081101561054f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561058757600080fd5b82018360208201111561059957600080fd5b803590602001918460018302840111640100000000831117156105bb57600080fd5b509092509050610d73565b3480156105d257600080fd5b506102c9600480360360208110156105e957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e5d565b34801561061257600080fd5b506102c96004803603602081101561062957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e6f565b34801561065257600080fd5b506102c9610e81565b34801561066757600080fd5b5061019e6004803603606081101561067e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610e87565b3480156106b757600080fd5b506101ba610ec8565b3480156106cc57600080fd5b50610275600480360360408110156106e357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610f01565b61019e6004803603602081101561071c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610f15565b34801561074557600080fd5b506102756004803603606081101561075c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561079957600080fd5b8201836020820111156107ab57600080fd5b803590602001918460018302840111640100000000831117156107cd57600080fd5b509092509050610f1f565b61019e610fd0565b3480156107ec57600080fd5b5061019e600480360360e081101561080357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135610fdc565b34801561085757600080fd5b506102c96004803603604081101561086e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356113ac565b34801561089d57600080fd5b506102c9600480360360408110156108b457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661143b565b6dffffffffffffffffffffffffffff80166003544701111561095c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f574554483a20737570706c79206c696d69742065786365656465640000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055805185815290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35050565b6040518060400160405280601181526020017f577261707065642045746865722076313000000000000000000000000000000081525081565b6000610a04338484611458565b50600192915050565b600073ffffffffffffffffffffffffffffffffffffffff82163014610a33576000610a49565b600354476dffffffffffffffffffffffffffff03035b92915050565b600354470190565b610a6133826114c7565b610a6b82826115ab565b5050565b600073ffffffffffffffffffffffffffffffffffffffff84163314610a9957610a99843384611678565b610aa4848484611754565b949350505050565b610ab633826114c7565b610ac033826115ab565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b601281565b6000610af9338686611754565b508473ffffffffffffffffffffffffffffffffffffffff1663a4c0ed36338686866040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050602060405180830381600087803b158015610b9f57600080fd5b505af1158015610bb3573d6000803e3d6000fd5b505050506040513d6020811015610bc957600080fd5b505195945050505050565b73ffffffffffffffffffffffffffffffffffffffff84163014610c5857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f574554483a20666c617368206d696e74206f6e6c792057455448313000000000604482015290519081900360640190fd5b6003805484019055610c6a85846108d9565b8473ffffffffffffffffffffffffffffffffffffffff166323e30c8b333086600087876040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b158015610d3657600080fd5b505af1158015610d4a573d6000803e3d6000fd5b50505050610d59853085611678565b610d6385846114c7565b5050600380549190910390555050565b6000610d7f84346108d9565b6040517fa4c0ed36000000000000000000000000000000000000000000000000000000008152336004820181815234602484018190526060604485019081526064850187905273ffffffffffffffffffffffffffffffffffffffff89169463a4c0ed36949389928992608401848480828437600081840152601f19601f82011690508083019250505095505050505050602060405180830381600087803b158015610e2957600080fd5b505af1158015610e3d573d6000803e3d6000fd5b505050506040513d6020811015610e5357600080fd5b5051949350505050565b60006020819052908152604090205481565b60016020526000908152604090205481565b60035481565b73ffffffffffffffffffffffffffffffffffffffff83163314610eaf57610eaf833383611678565b610eb983826114c7565b610ec382826115ab565b505050565b6040518060400160405280600681526020017f574554483130000000000000000000000000000000000000000000000000000081525081565b6000610f0e338484611754565b9392505050565b610ac081346108d9565b6000610f2c338686611458565b8473ffffffffffffffffffffffffffffffffffffffff1662ba451f338686866040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050602060405180830381600087803b158015610b9f57600080fd5b610fda33346108d9565b565b8342111561104b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f574554483a2045787069726564207065726d6974000000000000000000000000604482015290519081900360640190fd5b604080518082018252601181527f57726170706564204574686572207631300000000000000000000000000000006020918201528151808301835260018082527f31000000000000000000000000000000000000000000000000000000000000009183019190915282517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818401527f5afefa023603a382ac22bd36644e004cefabbfaf61d4180000d8dc2b10c168b8818501527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a0808401919091528551808403909101815260c08301865280519085012073ffffffffffffffffffffffffffffffffffffffff8d8116600081815286885288812080548089019091557f000000000000000000000000000000000000000000000000000000000000000060e0880152610100870192909252918e1661012086015261014085018d90526101608501526101808085018c9052875180860390910181526101a0850188528051908701207f19010000000000000000000000000000000000000000000000000000000000006101c08601526101c285018390526101e2808601829052885180870390910181526102028601808a52815191890191909120908390526102228601808a5281905260ff8c1661024287015261026286018b905261028286018a90529751939792969095929491936102a2808401937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301929081900390910190855afa1580156112ad573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061132857508b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61139357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f574554483a20696e76616c6964207065726d6974000000000000000000000000604482015290519081900360640190fd5b61139e8c8c8c611458565b505050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8316301461143257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f574554483a20666c617368206d696e74206f6e6c792057455448313000000000604482015290519081900360640190fd5b50600092915050565b600260209081526000928352604080842090915290825290205481565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015611546576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806118ab6021913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3505050565b60405160009073ffffffffffffffffffffffffffffffffffffffff84169083908381818185875af1925050503d8060008114611603576040519150601f19603f3d011682016040523d82523d6000602084013e611608565b606091505b5050905080610ec357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f574554483a204574686572207472616e73666572206661696c65640000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600260209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461174e578181101561174157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f574554483a2072657175657374206578636565647320616c6c6f77616e636500604482015290519081900360640190fd5b61174e8484848403611458565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff8316156118675773ffffffffffffffffffffffffffffffffffffffff8416600090815260208190526040902054828110156117f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806118866025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8086166000818152602081815260408083208887039055938816808352918490208054880190558351878152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35061187b565b61187184836114c7565b61187b83836115ab565b506001939250505056fe574554483a207472616e7366657220616d6f756e7420657863656564732062616c616e6365574554483a206275726e20616d6f756e7420657863656564732062616c616e6365a26469706673582212200538a34fbe57c27bfe67fcfcb61923d2dca13287b8dfc9513c670f7fac0bff1664736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061018f5760003560e01c806370a08231116100d6578063b760faf91161007f578063d505accf11610059578063d505accf146107e0578063d9d98ce41461084b578063dd62ed3e14610891576101a0565b8063b760faf914610706578063cae9ca5114610739578063d0e30db0146107d8576101a0565b80639555a942116100b05780639555a9421461065b57806395d89b41146106ab578063a9059cbb146106c0576101a0565b806370a08231146105c65780637ecebe00146106065780638b28d32f14610646576101a0565b80632e1a7d4d116101385780634000aea0116101125780634000aea0146103f05780635cffe9de1461048f5780635ddb7d7e14610539576101a0565b80632e1a7d4d1461038657806330adf81f146103b0578063313ce567146103c5576101a0565b806318160ddd1161016957806318160ddd146102db578063205c2878146102f057806323b872dd14610336576101a0565b806306fdde03146101a5578063095ea7b31461022f5780630ba9c65514610289576101a0565b366101a05761019e33346108d9565b005b600080fd5b3480156101b157600080fd5b506101ba6109be565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f45781810151838201526020016101dc565b50505050905090810190601f1680156102215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023b57600080fd5b506102756004803603604081101561025257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356109f7565b604080519115158252519081900360200190f35b34801561029557600080fd5b506102c9600480360360208110156102ac57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a0d565b60408051918252519081900360200190f35b3480156102e757600080fd5b506102c9610a4f565b3480156102fc57600080fd5b5061019e6004803603604081101561031357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a57565b34801561034257600080fd5b506102756004803603606081101561035957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610a6f565b34801561039257600080fd5b5061019e600480360360208110156103a957600080fd5b5035610aac565b3480156103bc57600080fd5b506102c9610ac3565b3480156103d157600080fd5b506103da610ae7565b6040805160ff9092168252519081900360200190f35b3480156103fc57600080fd5b506102756004803603606081101561041357600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561045057600080fd5b82018360208201111561046257600080fd5b8035906020019184600183028401116401000000008311171561048457600080fd5b509092509050610aec565b34801561049b57600080fd5b5061019e600480360360808110156104b257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013590911691604082013591908101906080810160608201356401000000008111156104fa57600080fd5b82018360208201111561050c57600080fd5b8035906020019184600183028401116401000000008311171561052e57600080fd5b509092509050610bd4565b6102756004803603604081101561054f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561058757600080fd5b82018360208201111561059957600080fd5b803590602001918460018302840111640100000000831117156105bb57600080fd5b509092509050610d73565b3480156105d257600080fd5b506102c9600480360360208110156105e957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e5d565b34801561061257600080fd5b506102c96004803603602081101561062957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e6f565b34801561065257600080fd5b506102c9610e81565b34801561066757600080fd5b5061019e6004803603606081101561067e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610e87565b3480156106b757600080fd5b506101ba610ec8565b3480156106cc57600080fd5b50610275600480360360408110156106e357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610f01565b61019e6004803603602081101561071c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610f15565b34801561074557600080fd5b506102756004803603606081101561075c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561079957600080fd5b8201836020820111156107ab57600080fd5b803590602001918460018302840111640100000000831117156107cd57600080fd5b509092509050610f1f565b61019e610fd0565b3480156107ec57600080fd5b5061019e600480360360e081101561080357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135610fdc565b34801561085757600080fd5b506102c96004803603604081101561086e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356113ac565b34801561089d57600080fd5b506102c9600480360360408110156108b457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661143b565b6dffffffffffffffffffffffffffff80166003544701111561095c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f574554483a20737570706c79206c696d69742065786365656465640000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055805185815290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35050565b6040518060400160405280601181526020017f577261707065642045746865722076313000000000000000000000000000000081525081565b6000610a04338484611458565b50600192915050565b600073ffffffffffffffffffffffffffffffffffffffff82163014610a33576000610a49565b600354476dffffffffffffffffffffffffffff03035b92915050565b600354470190565b610a6133826114c7565b610a6b82826115ab565b5050565b600073ffffffffffffffffffffffffffffffffffffffff84163314610a9957610a99843384611678565b610aa4848484611754565b949350505050565b610ab633826114c7565b610ac033826115ab565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b601281565b6000610af9338686611754565b508473ffffffffffffffffffffffffffffffffffffffff1663a4c0ed36338686866040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050602060405180830381600087803b158015610b9f57600080fd5b505af1158015610bb3573d6000803e3d6000fd5b505050506040513d6020811015610bc957600080fd5b505195945050505050565b73ffffffffffffffffffffffffffffffffffffffff84163014610c5857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f574554483a20666c617368206d696e74206f6e6c792057455448313000000000604482015290519081900360640190fd5b6003805484019055610c6a85846108d9565b8473ffffffffffffffffffffffffffffffffffffffff166323e30c8b333086600087876040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b158015610d3657600080fd5b505af1158015610d4a573d6000803e3d6000fd5b50505050610d59853085611678565b610d6385846114c7565b5050600380549190910390555050565b6000610d7f84346108d9565b6040517fa4c0ed36000000000000000000000000000000000000000000000000000000008152336004820181815234602484018190526060604485019081526064850187905273ffffffffffffffffffffffffffffffffffffffff89169463a4c0ed36949389928992608401848480828437600081840152601f19601f82011690508083019250505095505050505050602060405180830381600087803b158015610e2957600080fd5b505af1158015610e3d573d6000803e3d6000fd5b505050506040513d6020811015610e5357600080fd5b5051949350505050565b60006020819052908152604090205481565b60016020526000908152604090205481565b60035481565b73ffffffffffffffffffffffffffffffffffffffff83163314610eaf57610eaf833383611678565b610eb983826114c7565b610ec382826115ab565b505050565b6040518060400160405280600681526020017f574554483130000000000000000000000000000000000000000000000000000081525081565b6000610f0e338484611754565b9392505050565b610ac081346108d9565b6000610f2c338686611458565b8473ffffffffffffffffffffffffffffffffffffffff1662ba451f338686866040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050602060405180830381600087803b158015610b9f57600080fd5b610fda33346108d9565b565b8342111561104b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f574554483a2045787069726564207065726d6974000000000000000000000000604482015290519081900360640190fd5b604080518082018252601181527f57726170706564204574686572207631300000000000000000000000000000006020918201528151808301835260018082527f31000000000000000000000000000000000000000000000000000000000000009183019190915282517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818401527f5afefa023603a382ac22bd36644e004cefabbfaf61d4180000d8dc2b10c168b8818501527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a0808401919091528551808403909101815260c08301865280519085012073ffffffffffffffffffffffffffffffffffffffff8d8116600081815286885288812080548089019091557f000000000000000000000000000000000000000000000000000000000000000060e0880152610100870192909252918e1661012086015261014085018d90526101608501526101808085018c9052875180860390910181526101a0850188528051908701207f19010000000000000000000000000000000000000000000000000000000000006101c08601526101c285018390526101e2808601829052885180870390910181526102028601808a52815191890191909120908390526102228601808a5281905260ff8c1661024287015261026286018b905261028286018a90529751939792969095929491936102a2808401937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301929081900390910190855afa1580156112ad573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061132857508b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61139357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f574554483a20696e76616c6964207065726d6974000000000000000000000000604482015290519081900360640190fd5b61139e8c8c8c611458565b505050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8316301461143257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f574554483a20666c617368206d696e74206f6e6c792057455448313000000000604482015290519081900360640190fd5b50600092915050565b600260209081526000928352604080842090915290825290205481565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015611546576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806118ab6021913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3505050565b60405160009073ffffffffffffffffffffffffffffffffffffffff84169083908381818185875af1925050503d8060008114611603576040519150601f19603f3d011682016040523d82523d6000602084013e611608565b606091505b5050905080610ec357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f574554483a204574686572207472616e73666572206661696c65640000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600260209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461174e578181101561174157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f574554483a2072657175657374206578636565647320616c6c6f77616e636500604482015290519081900360640190fd5b61174e8484848403611458565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff8316156118675773ffffffffffffffffffffffffffffffffffffffff8416600090815260208190526040902054828110156117f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806118866025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8086166000818152602081815260408083208887039055938816808352918490208054880190558351878152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35061187b565b61187184836114c7565b61187b83836115ab565b506001939250505056fe574554483a207472616e7366657220616d6f756e7420657863656564732062616c616e6365574554483a206275726e20616d6f756e7420657863656564732062616c616e6365a26469706673582212200538a34fbe57c27bfe67fcfcb61923d2dca13287b8dfc9513c670f7fac0bff1664736f6c63430007060033",
  "devdoc": {
    "details": "WETH10 is an Ether ERC20 wrapper. You can `deposit` Ether and obtain Wrapped Ether which can then be operated as an ERC20 token. You can `withdraw` Ether from WETH10, which will burn Wrapped Ether in your wallet. The amount of Wrapped Ether in any wallet is always identical to the balance of Ether deposited minus the Ether withdrawn with that specific wallet.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Sets `value` as allowance of `spender` account over caller account's WETH10 token. Returns boolean value indicating whether operation succeeded. Emits {Approval} event."
      },
      "approveAndCall(address,uint256,bytes)": {
        "details": "Sets `value` as allowance of `spender` account over caller account's WETH10 token, after which a call is executed on `spender` with the `data` parameter. Returns boolean value indicating whether operation succeeded. Emits {Approval} event. For more information on approveAndCall format, see https://github.com/ethereum/EIPs/issues/677."
      },
      "deposit()": {
        "details": "`msg.value` of ether sent to contract grants caller account a matching increase in WETH10 token balance. Emits {Transfer} event to reflect WETH10 token mint of `msg.value` from zero address to caller account."
      },
      "depositTo(address)": {
        "details": "`msg.value` of ether sent to contract grants `to` account a matching increase in WETH10 token balance. Emits {Transfer} event to reflect WETH10 token mint of `msg.value` from zero address to `to` account."
      },
      "depositToAndCall(address,bytes)": {
        "details": "`msg.value` of ether sent to contract grants `to` account a matching increase in WETH10 token balance, after which a call is executed to an ERC677-compliant contract. Returns boolean value indicating whether operation succeeded. Emits {Transfer} event. Requirements:   - caller account must have at least `value` WETH10 token and transfer to account (`to`) cannot cause overflow. For more information on transferAndCall format, see https://github.com/ethereum/EIPs/issues/677."
      },
      "flashFee(address,uint256)": {
        "details": "Return the fee (zero) for flash lending an amount of WETH10."
      },
      "flashLoan(address,address,uint256,bytes)": {
        "details": "Flash lends `value` WETH10 tokens to the receiver address. By the end of the transaction, `value` WETH10 tokens will be burned from the receiver. The flash minted WETH10 is not backed by real Ether, but can be withdrawn as such up to the Ether balance of this contract. Arbitrary data can be passed as a bytes calldata parameter. Emits two {Transfer} events for minting and burning of the flash minted amount."
      },
      "maxFlashAmount(address)": {
        "details": "Return the amount of WETH10 that can be flash lended."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Sets `value` as allowance of `spender` account over `owner` account's WETH10 token, given `owner` account's signed approval. Emits {Approval} event. Requirements:   - `deadline` must be timestamp in future.   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over EIP712-formatted function arguments.   - the signature must use `owner` account's current nonce (see {nonces}).   - the signer cannot be zero address and must be `owner` account. For more information on signature format, see https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. WETH10 token implementation adapted from https://github.com/albertocuestacanada/ERC20Permit/blob/master/contracts/ERC20Permit.sol."
      },
      "totalSupply()": {
        "details": "Returns the total supply of WETH10 as the Ether held in this contract."
      },
      "transfer(address,uint256)": {
        "details": "Moves `value` WETH10 token from caller's account to account (`to`). A transfer to `address(0)` triggers a withdraw of the sent tokens. Returns boolean value indicating whether operation succeeded. Emits {Transfer} event. Requirements:   - caller account must have at least `value` WETH10 token."
      },
      "transferAndCall(address,uint256,bytes)": {
        "details": "Moves `value` WETH10 token from caller's account to account (`to`), after which a call is executed to an ERC677-compliant contract. Returns boolean value indicating whether operation succeeded. Emits {Transfer} event. Requirements:   - caller account must have at least `value` WETH10 token. For more information on transferAndCall format, see https://github.com/ethereum/EIPs/issues/677."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `value` WETH10 token from account (`from`) to account (`to`) using allowance mechanism. `value` is then deducted from caller account's allowance, unless set to `type(uint256).max`. A transfer to `address(0)` triggers a withdraw of the sent tokens in favor of caller. Returns boolean value indicating whether operation succeeded. Emits {Transfer} and {Approval} events. Requirements: - owner account (`from`) must have at least `value` WETH10 token. - caller account must have at least `value` allowance from account (`from`)."
      },
      "withdraw(uint256)": {
        "details": "Burn `value` WETH10 token from caller account and withdraw matching ether to the same. Emits {Transfer} event to reflect WETH10 token burn of `value` WETH10 token to zero address from caller account.  Requirements:   - caller account must have at least `value` balance of WETH10 token."
      },
      "withdrawFrom(address,address,uint256)": {
        "details": "Burn `value` WETH10 token from account (`from`) and withdraw matching ether to account (`to`). Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`), unless allowance is set to `type(uint256).max` Emits {Transfer} event to reflect WETH10 token burn of `value` to zero address from account (`from`). Requirements:   - `from` account must have at least `value` balance of WETH10 token.   - `from` account must have approved caller to spend at least `value` of WETH10 token, unless `from` and caller are the same account."
      },
      "withdrawTo(address,uint256)": {
        "details": "Burn `value` WETH10 token from caller account and withdraw matching ether to account (`to`). Emits {Transfer} event to reflect WETH10 token burn of `value` WETH10 token to zero address from caller account. Requirements:   - caller account must have at least `value` balance of WETH10 token."
      }
    },
    "stateVariables": {
      "allowance": {
        "details": "Records number of WETH10 token that account (second) will be allowed to spend on behalf of another account (first) through {transferFrom}."
      },
      "balanceOf": {
        "details": "Records amount of WETH10 token owned by account."
      },
      "flashMinted": {
        "details": "Current amount of flash minted WETH."
      },
      "nonces": {
        "details": "Records current ERC2612 nonce for account. This value must be included whenever signature is generated for {permit}. Every successful call to {permit} increases account's nonce by one. This prevents signature from being used multiple times."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 50,
        "contract": "contracts/WETH10.sol:WETH10",
        "label": "balanceOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 56,
        "contract": "contracts/WETH10.sol:WETH10",
        "label": "nonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 64,
        "contract": "contracts/WETH10.sol:WETH10",
        "label": "allowance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 68,
        "contract": "contracts/WETH10.sol:WETH10",
        "label": "flashMinted",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "1280200",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "PERMIT_TYPEHASH()": "infinite",
      "allowance(address,address)": "1293",
      "approve(address,uint256)": "22364",
      "approveAndCall(address,uint256,bytes)": "infinite",
      "balanceOf(address)": "1161",
      "decimals()": "297",
      "deposit()": "23790",
      "depositTo(address)": "23797",
      "depositToAndCall(address,bytes)": "infinite",
      "flashFee(address,uint256)": "399",
      "flashLoan(address,address,uint256,bytes)": "infinite",
      "flashMinted()": "1088",
      "maxFlashAmount(address)": "1190",
      "name()": "infinite",
      "nonces(address)": "1180",
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
      "symbol()": "infinite",
      "totalSupply()": "1052",
      "transfer(address,uint256)": "infinite",
      "transferAndCall(address,uint256,bytes)": "infinite",
      "transferFrom(address,address,uint256)": "infinite",
      "withdraw(uint256)": "infinite",
      "withdrawFrom(address,address,uint256)": "infinite",
      "withdrawTo(address,uint256)": "infinite"
    },
    "internal": {
      "_approve(address,address,uint256)": "infinite",
      "_burnFrom(address,uint256)": "infinite",
      "_decreaseAllowance(address,address,uint256)": "infinite",
      "_mintTo(address,uint256)": "infinite",
      "_transferEther(address payable,uint256)": "infinite",
      "_transferFrom(address,address,uint256)": "infinite"
    }
  }
}